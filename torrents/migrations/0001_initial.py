# Generated by Django 5.1.3 on 2024-11-27 20:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='License name')),
                ('description', models.TextField(blank=True, default='', verbose_name='License description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='License description')),
                ('description_fr', models.TextField(blank=True, default='', null=True, verbose_name='License description')),
                ('website_url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Official website URL')),
                ('website_url_en', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Official website URL')),
                ('website_url_fr', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Official website URL')),
            ],
            options={
                'verbose_name': 'License',
                'verbose_name_plural': 'Licenses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=1000, verbose_name='URL')),
                ('is_reachable', models.BooleanField(default=True, help_text='Indicates whether the tracker is reachable at the network level.')),
                ('is_reachable_mode', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual')], default='automatic', help_text='Indicates whether the is_reachable field is managed automatically or manually.', max_length=10)),
                ('is_scrapable', models.BooleanField(default=True, help_text='Indicates whether the tracker supports scraping (managed manually or via analysis).')),
                ('is_scrapable_mode', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual')], default='automatic', help_text='Indicates whether the is_scrapable field is managed automatically or manually.', max_length=10)),
                ('last_seen', models.DateTimeField(blank=True, help_text='The last date when the tracker was successfully contacted (network-level reachability).', null=True)),
                ('last_try', models.DateTimeField(blank=True, help_text='The most recent attempt to contact the tracker (network-level or scrape).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this tracker was added to the database.')),
            ],
            options={
                'verbose_name': 'Tracker',
                'verbose_name_plural': 'Trackers',
                'ordering': ['url'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_fr', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='torrents.category', verbose_name='Parent category')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Project name')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('is_active', models.BooleanField(default=False, verbose_name='Show in the front end')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description of project')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='Description of project')),
                ('description_fr', models.TextField(blank=True, default='', null=True, verbose_name='Description of project')),
                ('website_url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Official website URL')),
                ('website_url_download', models.URLField(blank=True, max_length=2000, verbose_name='Download page URL')),
                ('website_url_repo', models.URLField(blank=True, max_length=2000, verbose_name='Repository URL')),
                ('torrent_count', models.PositiveIntegerField(default=0, verbose_name='Number of Torrents')),
                ('image', models.ImageField(blank=True, default='', null=True, upload_to='img/project/original/')),
                ('mini_image', models.ImageField(blank=True, default='', upload_to='img/project/mini/')),
                ('small_image', models.ImageField(blank=True, default='', upload_to='img/project/small/')),
                ('medium_image', models.ImageField(blank=True, default='', upload_to='img/project/medium/')),
                ('large_image', models.ImageField(blank=True, default='', upload_to='img/project/large/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='torrents.category', verbose_name='Category')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='torrents.license', verbose_name='Default license')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Torrent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info_hash', models.CharField(max_length=40, unique=True, verbose_name='SHA1 of torrent')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('slug', models.SlugField(blank=True, max_length=128, null=True, unique=True)),
                ('size', models.PositiveBigIntegerField(default=0, verbose_name='Size in bytes')),
                ('pieces', models.PositiveIntegerField(default=1, verbose_name='Number of pieces')),
                ('piece_size', models.PositiveIntegerField(default=0, verbose_name='Piece size in bytes')),
                ('magnet', models.TextField(blank=True, null=True, verbose_name='Magnet URI')),
                ('torrent_file', models.FileField(blank=True, null=True, upload_to='torrents/', verbose_name='Torrent file')),
                ('comment', models.CharField(blank=True, max_length=256, null=True, verbose_name='Comment')),
                ('file_list', models.TextField(blank=True, null=True, verbose_name='List of files')),
                ('file_count', models.PositiveIntegerField(default=1, verbose_name='Number of files')),
                ('architecture', models.CharField(blank=True, choices=[('i386', 'i386'), ('amd64', 'amd64'), ('arm64', 'ARM64'), ('arm', 'ARM'), ('other', 'Other')], max_length=10, null=True, verbose_name='Architecture')),
                ('os', models.CharField(blank=True, choices=[('linux', 'Linux'), ('windows', 'Windows'), ('macos', 'MacOS'), ('android', 'Android'), ('bsd', 'BSD')], max_length=10, null=True, verbose_name='Operating System')),
                ('gpg_signature', models.FileField(blank=True, null=True, upload_to='torrents/', verbose_name='GPG signature file')),
                ('is_signed', models.BooleanField(default=False, verbose_name='Is signed')),
                ('is_active', models.BooleanField(default=False, verbose_name='Show in the front end')),
                ('is_bitiso', models.BooleanField(default=True, verbose_name='Created by Bitiso?')),
                ('status', models.CharField(choices=[('active', 'Active - visible to all'), ('pending', 'Pending validation'), ('blocked', 'Blocked'), ('deleted', 'Deleted')], default='pending', max_length=10, verbose_name='Status')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('website_url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Official website URL')),
                ('website_url_download', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Download page URL')),
                ('website_url_repo', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Repository URL')),
                ('version', models.CharField(blank=True, max_length=32, null=True, verbose_name='Version of the software')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('seed_count', models.PositiveIntegerField(default=0, verbose_name='Number of seeds')),
                ('leech_count', models.PositiveIntegerField(default=0, verbose_name='Number of leeches')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Number of downloads')),
                ('completion_count', models.PositiveIntegerField(default=0, verbose_name='Number of completions')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='torrents.category', verbose_name='Category')),
                ('license', models.ForeignKey(blank=True, help_text='Overrides project license if specified', null=True, on_delete=django.db.models.deletion.SET_NULL, to='torrents.license', verbose_name='License')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='torrents', to='torrents.project', verbose_name='Project')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='torrents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Torrent',
                'verbose_name_plural': 'Torrents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrackerStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('announce_priority', models.IntegerField(default=0, verbose_name='Announce priority')),
                ('seed', models.PositiveIntegerField(default=0, verbose_name='Number of seeds')),
                ('leech', models.PositiveIntegerField(default=0, verbose_name='Number of leeches')),
                ('complete', models.PositiveIntegerField(default=0, verbose_name='Complete')),
                ('last_scrape_attempt', models.DateTimeField(blank=True, help_text='Last attempt to scrape this torrent on this tracker.', null=True)),
                ('last_successful_scrape', models.DateTimeField(blank=True, help_text='The last time this torrent was successfully scraped on this tracker.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this tracker stat was added to the database.')),
                ('torrent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='torrents.torrent')),
                ('tracker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='torrents.tracker')),
            ],
            options={
                'verbose_name': 'Tracker Stat',
                'verbose_name_plural': 'Tracker Stats',
                'ordering': ['torrent', 'tracker'],
            },
        ),
        migrations.AddField(
            model_name='torrent',
            name='trackers',
            field=models.ManyToManyField(through='torrents.TrackerStat', to='torrents.tracker'),
        ),
        migrations.AddConstraint(
            model_name='trackerstat',
            constraint=models.UniqueConstraint(fields=('torrent', 'tracker'), name='unique_torrent_tracker'),
        ),
        migrations.AddIndex(
            model_name='torrent',
            index=models.Index(fields=['info_hash'], name='torrents_to_info_ha_c9cc27_idx'),
        ),
        migrations.AddIndex(
            model_name='torrent',
            index=models.Index(fields=['created_at'], name='torrents_to_created_062a65_idx'),
        ),
        migrations.AddIndex(
            model_name='torrent',
            index=models.Index(fields=['updated_at'], name='torrents_to_updated_2cd42e_idx'),
        ),
        migrations.AddIndex(
            model_name='torrent',
            index=models.Index(fields=['is_active'], name='torrents_to_is_acti_977b82_idx'),
        ),
        migrations.AddIndex(
            model_name='torrent',
            index=models.Index(fields=['status'], name='torrents_to_status_4e05b4_idx'),
        ),
        migrations.AddIndex(
            model_name='torrent',
            index=models.Index(fields=['category'], name='torrents_to_categor_3cbfc1_idx'),
        ),
    ]
